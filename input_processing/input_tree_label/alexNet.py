import os
from PIL import Image

import torch.nn as nn
import torchvision.transforms.functional as TF
from torch.utils.data import Dataset
from torchvision import models

from read_mha import *
from tree import *


class MyAlexNet(nn.Module):

    "myAlexNet(i.e. alexNet with only features cutted to 3rd conv layer)"

    original_model = models.alexnet(pretrained=True)

    def __init__(self):
        super(MyAlexNet, self).__init__()
        self.features = nn.Sequential(
        # stop at 3rd conv layer
        *list(self.original_model.features.children())[:12] #for last layer 12
        )

    def forward(self, x):
        x=self.features(x)
        return x



class SimpleCNN(torch.nn.Module):

    "my alex for map i.e. same as myAlex but convolutions go from one channel to one"

    def __init__(self):
        super(SimpleCNN, self).__init__()
        self.conv1 = torch.nn.Conv2d(1,1, kernel_size=11, stride=4,padding=2 ,bias=False)
        self.conv2 = torch.nn.Conv2d(1,1, kernel_size=5, padding=2,bias=False)
        self.conv3 = torch.nn.Conv2d(1,1, kernel_size=3, padding=1, bias=False)
        self.avg1 = torch.nn.AvgPool2d(kernel_size=3, stride=2)
        self.avg2 = torch.nn.AvgPool2d(kernel_size=3, stride=2)

        self.conv1.weight.data.copy_(  torch.ones([1,1,11,11])/121 )
        self.conv2.weight.data.copy_( torch.ones([1,1,5,5]) /25 )
        self.conv3.weight.data.copy_( torch.ones([1,1,3,3]) /9 )


    def forward(self, x):
        x = self.conv1(x)
        x = self.avg1(x)

        x = self.conv2(x)
        x = self.avg2(x)

        x = self.conv3(x)

        return x


class myDataset(Dataset):

    "class dataset that for every image laod original image, .mha map and tree generated by glia"

    files = []
    image_names = []

    def __init__(self, tree_dir, image_dir, transform=None):
        """
        Args:
            root_dir (string): Directory with all the images.
            transform (callable, optional): Optional transform to be applied
                on a sample.
        """
        self.tree_dir = tree_dir
        self.image_dir = image_dir
        self.transform = transform
        for file in os.listdir(tree_dir):
            self.files.append(file)
        self.files.sort()
        for i in range(0,len(self.files),2):
            name = self.files[i]
            self.image_names.append(name[:-18])


    def __len__(self):
        return len(self.image_names)

    def __getitem__(self, idx):

        #open image
        img = Image.open(self.image_dir+"/"+self.image_names[idx]+".jpg")
        x=TF.to_tensor(img)
        x.unsqueeze_(0)

        #open map
        map= load_itk(self.tree_dir+"/"+self.image_names[idx]+"__segmentation.mha")

        #open tree file
        tree = create_tree(self.tree_dir+"/"+self.image_names[idx]+"__segmentation.sif")

        dict = {
          "image" : x,
          "map" : map,
          "tree" : tree,
          "name" : self.image_names[idx],
        }

        return dict
